/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Pairing {
  export type G1PointStruct = { x: BigNumberish; y: BigNumberish };

  export type G1PointStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };

  export type G2PointStruct = {
    x: [BigNumberish, BigNumberish];
    y: [BigNumberish, BigNumberish];
  };

  export type G2PointStructOutput = [
    x: [bigint, bigint],
    y: [bigint, bigint]
  ] & { x: [bigint, bigint]; y: [bigint, bigint] };
}

export declare namespace SnarkCommon {
  export type VerifyingKeyStruct = {
    alpha1: Pairing.G1PointStruct;
    beta2: Pairing.G2PointStruct;
    gamma2: Pairing.G2PointStruct;
    delta2: Pairing.G2PointStruct;
    ic: Pairing.G1PointStruct[];
  };

  export type VerifyingKeyStructOutput = [
    alpha1: Pairing.G1PointStructOutput,
    beta2: Pairing.G2PointStructOutput,
    gamma2: Pairing.G2PointStructOutput,
    delta2: Pairing.G2PointStructOutput,
    ic: Pairing.G1PointStructOutput[]
  ] & {
    alpha1: Pairing.G1PointStructOutput;
    beta2: Pairing.G2PointStructOutput;
    gamma2: Pairing.G2PointStructOutput;
    delta2: Pairing.G2PointStructOutput;
    ic: Pairing.G1PointStructOutput[];
  };
}

export interface VkRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "genProcessVkSig"
      | "genSubsidyVkSig"
      | "genTallyVkSig"
      | "getProcessVk"
      | "getProcessVkBySig"
      | "getSubsidyVk"
      | "getSubsidyVkBySig"
      | "getTallyVk"
      | "getTallyVkBySig"
      | "hasProcessVk"
      | "hasSubsidyVk"
      | "hasTallyVk"
      | "isProcessVkSet"
      | "isSubsidyVkSet"
      | "isTallyVkSet"
      | "owner"
      | "renounceOwnership"
      | "setSubsidyKeys"
      | "setVerifyingKeys"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProcessVkSet"
      | "SubsidyVkSet"
      | "TallyVkSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "genProcessVkSig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genSubsidyVkSig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genTallyVkSig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessVk",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessVkBySig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubsidyVk",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubsidyVkBySig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyVk",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyVkBySig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasProcessVk",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubsidyVk",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTallyVk",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isProcessVkSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubsidyVkSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTallyVkSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSubsidyKeys",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      SnarkCommon.VerifyingKeyStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyingKeys",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      SnarkCommon.VerifyingKeyStruct,
      SnarkCommon.VerifyingKeyStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "genProcessVkSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genSubsidyVkSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genTallyVkSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessVk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessVkBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubsidyVk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubsidyVkBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTallyVk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTallyVkBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasProcessVk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubsidyVk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasTallyVk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProcessVkSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubsidyVkSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTallyVkSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubsidyKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyingKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProcessVkSetEvent {
  export type InputTuple = [_sig: BigNumberish];
  export type OutputTuple = [_sig: bigint];
  export interface OutputObject {
    _sig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubsidyVkSetEvent {
  export type InputTuple = [_sig: BigNumberish];
  export type OutputTuple = [_sig: bigint];
  export interface OutputObject {
    _sig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyVkSetEvent {
  export type InputTuple = [_sig: BigNumberish];
  export type OutputTuple = [_sig: bigint];
  export interface OutputObject {
    _sig: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VkRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VkRegistry;
  waitForDeployment(): Promise<this>;

  interface: VkRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  genProcessVkSig: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [bigint],
    "view"
  >;

  genSubsidyVkSig: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [bigint],
    "view"
  >;

  genTallyVkSig: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getProcessVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  getProcessVkBySig: TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  getSubsidyVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  getSubsidyVkBySig: TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  getTallyVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  getTallyVkBySig: TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;

  hasProcessVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [boolean],
    "view"
  >;

  hasSubsidyVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [boolean],
    "view"
  >;

  hasTallyVk: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [boolean],
    "view"
  >;

  isProcessVkSet: TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;

  isSubsidyVkSet: TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;

  isTallyVkSet: TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setSubsidyKeys: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _subsidyVk: SnarkCommon.VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  setVerifyingKeys: TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish,
      _processVk: SnarkCommon.VerifyingKeyStruct,
      _tallyVk: SnarkCommon.VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "genProcessVkSig"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "genSubsidyVkSig"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "genTallyVkSig"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProcessVkBySig"
  ): TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubsidyVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubsidyVkBySig"
  ): TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTallyVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTallyVkBySig"
  ): TypedContractMethod<
    [_sig: BigNumberish],
    [SnarkCommon.VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasProcessVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSubsidyVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasTallyVk"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProcessVkSet"
  ): TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSubsidyVkSet"
  ): TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTallyVkSet"
  ): TypedContractMethod<[_sig: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSubsidyKeys"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _subsidyVk: SnarkCommon.VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVerifyingKeys"
  ): TypedContractMethod<
    [
      _stateTreeDepth: BigNumberish,
      _intStateTreeDepth: BigNumberish,
      _messageTreeDepth: BigNumberish,
      _voteOptionTreeDepth: BigNumberish,
      _messageBatchSize: BigNumberish,
      _processVk: SnarkCommon.VerifyingKeyStruct,
      _tallyVk: SnarkCommon.VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProcessVkSet"
  ): TypedContractEvent<
    ProcessVkSetEvent.InputTuple,
    ProcessVkSetEvent.OutputTuple,
    ProcessVkSetEvent.OutputObject
  >;
  getEvent(
    key: "SubsidyVkSet"
  ): TypedContractEvent<
    SubsidyVkSetEvent.InputTuple,
    SubsidyVkSetEvent.OutputTuple,
    SubsidyVkSetEvent.OutputObject
  >;
  getEvent(
    key: "TallyVkSet"
  ): TypedContractEvent<
    TallyVkSetEvent.InputTuple,
    TallyVkSetEvent.OutputTuple,
    TallyVkSetEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProcessVkSet(uint256)": TypedContractEvent<
      ProcessVkSetEvent.InputTuple,
      ProcessVkSetEvent.OutputTuple,
      ProcessVkSetEvent.OutputObject
    >;
    ProcessVkSet: TypedContractEvent<
      ProcessVkSetEvent.InputTuple,
      ProcessVkSetEvent.OutputTuple,
      ProcessVkSetEvent.OutputObject
    >;

    "SubsidyVkSet(uint256)": TypedContractEvent<
      SubsidyVkSetEvent.InputTuple,
      SubsidyVkSetEvent.OutputTuple,
      SubsidyVkSetEvent.OutputObject
    >;
    SubsidyVkSet: TypedContractEvent<
      SubsidyVkSetEvent.InputTuple,
      SubsidyVkSetEvent.OutputTuple,
      SubsidyVkSetEvent.OutputObject
    >;

    "TallyVkSet(uint256)": TypedContractEvent<
      TallyVkSetEvent.InputTuple,
      TallyVkSetEvent.OutputTuple,
      TallyVkSetEvent.OutputObject
    >;
    TallyVkSet: TypedContractEvent<
      TallyVkSetEvent.InputTuple,
      TallyVkSetEvent.OutputTuple,
      TallyVkSetEvent.OutputObject
    >;
  };
}

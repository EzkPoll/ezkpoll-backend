/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SubsidyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cbi"
      | "genSubsidyPackedVals"
      | "genSubsidyPublicInputHash"
      | "hash2"
      | "hash3"
      | "hash4"
      | "hash5"
      | "hashLeftRight"
      | "mp"
      | "owner"
      | "poll"
      | "rbi"
      | "renounceOwnership"
      | "sbCommitment"
      | "sha256Hash"
      | "subsidyCommitment"
      | "transferOwnership"
      | "updateSbCommitment"
      | "updateSubsidy"
      | "verifier"
      | "verifySubsidyProof"
      | "vkRegistry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(functionFragment: "cbi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genSubsidyPackedVals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "genSubsidyPublicInputHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hash2",
    values: [[BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash3",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "hash5",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mp", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poll", values?: undefined): string;
  encodeFunctionData(functionFragment: "rbi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sha256Hash",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subsidyCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSbCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubsidy",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySubsidyProof",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vkRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "cbi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genSubsidyPackedVals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genSubsidyPublicInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash5", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rbi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha256Hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subsidyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSbCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubsidy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySubsidyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vkRegistry", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Subsidy extends BaseContract {
  connect(runner?: ContractRunner | null): Subsidy;
  waitForDeployment(): Promise<this>;

  interface: SubsidyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cbi: TypedContractMethod<[], [bigint], "view">;

  genSubsidyPackedVals: TypedContractMethod<
    [_numSignUps: BigNumberish],
    [bigint],
    "view"
  >;

  genSubsidyPublicInputHash: TypedContractMethod<
    [_numSignUps: BigNumberish, _newSubsidyCommitment: BigNumberish],
    [bigint],
    "view"
  >;

  hash2: TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash3: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash4: TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  hash5: TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;

  hashLeftRight: TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;

  mp: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poll: TypedContractMethod<[], [string], "view">;

  rbi: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sbCommitment: TypedContractMethod<[], [bigint], "view">;

  sha256Hash: TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;

  subsidyCommitment: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSbCommitment: TypedContractMethod<[], [void], "nonpayable">;

  updateSubsidy: TypedContractMethod<
    [_newSubsidyCommitment: BigNumberish, _proof: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  verifySubsidyProof: TypedContractMethod<
    [
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _newSubsidyCommitment: BigNumberish
    ],
    [boolean],
    "view"
  >;

  vkRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cbi"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "genSubsidyPackedVals"
  ): TypedContractMethod<[_numSignUps: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "genSubsidyPublicInputHash"
  ): TypedContractMethod<
    [_numSignUps: BigNumberish, _newSubsidyCommitment: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash2"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash3"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash4"
  ): TypedContractMethod<
    [array: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash5"
  ): TypedContractMethod<
    [
      array: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [left: BigNumberish, right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(nameOrSignature: "mp"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poll"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rbi"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sbCommitment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sha256Hash"
  ): TypedContractMethod<[array: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "subsidyCommitment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSbCommitment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSubsidy"
  ): TypedContractMethod<
    [_newSubsidyCommitment: BigNumberish, _proof: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifySubsidyProof"
  ): TypedContractMethod<
    [
      _proof: BigNumberish[],
      _numSignUps: BigNumberish,
      _newSubsidyCommitment: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "vkRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
